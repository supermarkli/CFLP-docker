# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import src.grpc.generated.federation_pb2 as federation__pb2



GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in federation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FederatedLearningStub(object):
    """联邦学习服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAndSetup = channel.unary_unary(
                '/federation.FederatedLearning/RegisterAndSetup',
                request_serializer=federation__pb2.ClientInfo.SerializeToString,
                response_deserializer=federation__pb2.SetupResponse.FromString,
                _registered_method=True)
        self.CheckTrainingStatus = channel.unary_unary(
                '/federation.FederatedLearning/CheckTrainingStatus',
                request_serializer=federation__pb2.ClientInfo.SerializeToString,
                response_deserializer=federation__pb2.TrainingStatusResponse.FromString,
                _registered_method=True)
        self.SubmitUpdate = channel.unary_unary(
                '/federation.FederatedLearning/SubmitUpdate',
                request_serializer=federation__pb2.ClientUpdate.SerializeToString,
                response_deserializer=federation__pb2.ServerUpdate.FromString,
                _registered_method=True)
        self.SubmitUpdateHeStream = channel.stream_unary(
                '/federation.FederatedLearning/SubmitUpdateHeStream',
                request_serializer=federation__pb2.HeClientUpdateChunk.SerializeToString,
                response_deserializer=federation__pb2.ServerUpdate.FromString,
                _registered_method=True)
        self.GetGlobalModel = channel.unary_unary(
                '/federation.FederatedLearning/GetGlobalModel',
                request_serializer=federation__pb2.GetModelRequest.SerializeToString,
                response_deserializer=federation__pb2.ModelParameters.FromString,
                _registered_method=True)


class FederatedLearningServicer(object):
    """联邦学习服务
    """

    def RegisterAndSetup(self, request, context):
        """客户端注册自己，获取初始模型、运行模式和所需的安全材料
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTrainingStatus(self, request, context):
        """客户端循环查询训练是否可以开始
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitUpdate(self, request, context):
        """客户端提交更新（统一接口）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitUpdateHeStream(self, request_iterator, context):
        """HE模式专用的客户端流式更新接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGlobalModel(self, request, context):
        """客户端获取全局模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAndSetup': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAndSetup,
                    request_deserializer=federation__pb2.ClientInfo.FromString,
                    response_serializer=federation__pb2.SetupResponse.SerializeToString,
            ),
            'CheckTrainingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTrainingStatus,
                    request_deserializer=federation__pb2.ClientInfo.FromString,
                    response_serializer=federation__pb2.TrainingStatusResponse.SerializeToString,
            ),
            'SubmitUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitUpdate,
                    request_deserializer=federation__pb2.ClientUpdate.FromString,
                    response_serializer=federation__pb2.ServerUpdate.SerializeToString,
            ),
            'SubmitUpdateHeStream': grpc.stream_unary_rpc_method_handler(
                    servicer.SubmitUpdateHeStream,
                    request_deserializer=federation__pb2.HeClientUpdateChunk.FromString,
                    response_serializer=federation__pb2.ServerUpdate.SerializeToString,
            ),
            'GetGlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalModel,
                    request_deserializer=federation__pb2.GetModelRequest.FromString,
                    response_serializer=federation__pb2.ModelParameters.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'federation.FederatedLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('federation.FederatedLearning', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FederatedLearning(object):
    """联邦学习服务
    """

    @staticmethod
    def RegisterAndSetup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federation.FederatedLearning/RegisterAndSetup',
            federation__pb2.ClientInfo.SerializeToString,
            federation__pb2.SetupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckTrainingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federation.FederatedLearning/CheckTrainingStatus',
            federation__pb2.ClientInfo.SerializeToString,
            federation__pb2.TrainingStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federation.FederatedLearning/SubmitUpdate',
            federation__pb2.ClientUpdate.SerializeToString,
            federation__pb2.ServerUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitUpdateHeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/federation.FederatedLearning/SubmitUpdateHeStream',
            federation__pb2.HeClientUpdateChunk.SerializeToString,
            federation__pb2.ServerUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federation.FederatedLearning/GetGlobalModel',
            federation__pb2.GetModelRequest.SerializeToString,
            federation__pb2.ModelParameters.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
