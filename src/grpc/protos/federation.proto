syntax = "proto3";

package federation;

import "google/protobuf/any.proto";

// 联邦学习服务
service FederatedLearning {
    // 客户端注册自己，获取初始模型、运行模式和所需的安全材料
    rpc RegisterAndSetup(ClientInfo) returns (SetupResponse);

    // 客户端循环查询训练是否可以开始
    rpc CheckTrainingStatus(ClientInfo) returns (TrainingStatusResponse);
    
    // 客户端提交更新（统一接口）
    rpc SubmitUpdate(ClientUpdate) returns (ServerUpdate);

    // HE模式专用的客户端流式更新接口
    rpc SubmitUpdateHeStream(stream HeClientUpdateChunk) returns (ServerUpdate);

    // 客户端获取全局模型
    rpc GetGlobalModel(GetModelRequest) returns (ModelParameters);
}

// 客户端基本信息
message ClientInfo {
    string client_id = 1;
    string model_type = 2;
    int64 data_size = 3;
}

// 客户端注册后的响应，包含启动所需的所有信息
message SetupResponse {
    string privacy_mode = 1; // "none", "he", or "tee"
    ModelParameters initial_model = 2; // 全局初始模型

    // 仅在 mode = "he" 时填充
    bytes he_public_key = 3;

    // 仅在 mode = "tee" 时填充
    // 模拟的 TEE 证明报告，在真实场景中由 TEE 硬件生成
    bytes tee_attestation_report = 4;
    bytes tee_public_key = 5;
    bytes sgx_quote = 6; // 新增字段，用于携带 DCAP Quote
}

// 训练状态检查的响应
message TrainingStatusResponse {
    int32 code = 1;         // 状态码 (e.g., 100: 等待, 200: 就绪, 300: 收敛)
    string message = 2;     // 状态消息
    int32 registered_clients = 3;
    int32 total_clients = 4;
    int32 submitted_clients = 5;
}

// 统一的客户端更新消息
message ClientUpdate {
    string client_id = 1;
    int32 round = 2;

    oneof payload {
        PlaintextPayload plaintext = 3;
        HePayload he = 4;
        TeePayload tee = 5;
        MpcPayload mpc = 6;
    }
}

// "none" 模式的载荷
message PlaintextPayload {
    ParametersAndMetrics parameters_and_metrics = 1;
}

// "he" 模式的载荷
message HePayload {
    EncryptedParametersAndMetrics parameters_and_metrics = 1;
}

// "mpc" 模式的载荷
message MpcPayload {
    SharedParametersAndMetrics parameters_and_metrics = 1;
}

// "tee" 模式的载荷
message TeePayload {
    bytes encrypted_symmetric_key = 1; // AES key, encrypted with TEE RSA public key
    bytes nonce = 2;                   // Nonce/IV used for AES encryption
    bytes encrypted_payload = 3;       // ParametersAndMetrics, encrypted with AES key
}

// 服务器对客户端更新的响应
message ServerUpdate {
    int32 code = 1;         // 状态码, 200:成功, 400:失败, 500:服务器错误
    string message = 2;     // 状态消息
    int32 current_round = 3;// 当前轮次
}

// 获取全局模型的请求
message GetModelRequest {
    string client_id = 1;
    int32 round = 2;
}

// 明文客户端更新
/*
message ClientUpdate {
    string client_id = 1;
    int32 round = 2;
    ParametersAndMetrics parameters_and_metrics = 3;
}
*/

// 明文参数和指标
message ParametersAndMetrics {
    ModelParameters parameters = 1;
    TrainingMetrics metrics = 2;
}

// 明文模型参数
message ModelParameters {
    bytes parameters = 1;
}

// 训练指标
message TrainingMetrics {
    double test_acc = 1;
    int64 test_num = 2;
    double auc = 3;
    double loss = 4;
    int64 train_num = 5;
}

// TEE 模式下的加密客户端更新
/*
message TeeClientUpdate {
    string client_id = 1;
    int32 round = 2;
    bytes encrypted_symmetric_key = 3; // AES key, encrypted with TEE RSA public key
    bytes nonce = 4;                   // Nonce/IV used for AES encryption
    bytes encrypted_payload = 5;       // ParametersAndMetrics, encrypted with AES key
}
*/

// 密文客户端更新
/*
message EncryptedClientUpdate {
    string client_id = 1;
    int32 round = 2;
    EncryptedParametersAndMetrics parameters_and_metrics = 3;
}
*/

// 密文参数和指标
message EncryptedParametersAndMetrics {
    EncryptedModelParameters parameters = 1;
    EncryptedTrainingMetrics metrics = 2;
}

// MPC 模式下的份额化参数和指标
message SharedParametersAndMetrics {
    SharedModelParameters parameters = 1;
    SharedTrainingMetrics metrics = 2;
}

// 份额化的模型参数
message SharedModelParameters {
    map<string, SharedNumpyArray> parameters = 1;
}

// 份额化的 Numpy 数组
message SharedNumpyArray {
    repeated bytes data = 1; // 参数被分割成的所有份额
    repeated int64 shape = 2; // 原始形状
}

// 份额化的训练指标
message SharedTrainingMetrics {
    bytes test_acc = 1;
    bytes test_num = 2;
    bytes auc = 3;
    bytes loss = 4;
    bytes train_num = 5;
}

// 密文模型参数
message EncryptedModelParameters {
    map<string, EncryptedNumpyArray> parameters = 1;
}

// 加密后的Numpy数组
message EncryptedNumpyArray {
    repeated bytes data = 1; // 分块加密的数据
    repeated int64 shape = 2; // 原始形状
}

// 加密的训练指标
message EncryptedTrainingMetrics {
    bytes test_acc = 1;
    bytes test_num = 2;
    bytes auc = 3;
    bytes loss = 4;
    bytes train_num = 5;
}

// HE流式更新的单个数据块
message HeClientUpdateChunk {
    // --- 元数据: 仅在第一个块中发送 ---
    string client_id = 1;
    int32 round = 2;
    // 加密的训练指标, 仅在第一个块中发送
    EncryptedTrainingMetrics metrics = 3;

    // --- 载荷: 每个块都包含 ---
    // 模型参数的一个数据块。
    // 对于第一个块，这可以是第一个层。
    // 对于后续的块，这是接下来的层。
    // 键是层的名称。
    map<string, EncryptedNumpyArray> parameters_chunk = 4;
    
    // --- 流控制元数据 ---
    string layer_name = 5; // 当前块所属的层名称
    bool is_last_chunk_for_layer = 6; // 标记是否为当前层的最后一个块
} 